{"ast":null,"code":"import React,{useEffect,useState}from'react';import MessageHeader from'./MessageHeader/MessageHeader';import MessageSender from'./MessageSender/MessageSender';import firebase from'../../Firebase/Firebase';import{useParams}from'react-router-dom';import{useSelector}from'react-redux';import Message from'./Message/Message';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function Chat(){const{channelId}=useParams();const{currentUser}=useSelector(state=>state.auth);const[channel,setChannel]=useState([]);const[massages,setMassages]=useState([]);const[inputText,setInputText]=useState('');const db=firebase.firestore();// handle Submit to handle the input and take the message and send it to the firebase\nconst handleSubmit=e=>{e.preventDefault();console.log(inputText);if(channelId){db.collection('channels').doc(channelId).collection('massages').add({massages:inputText,timeStamp:firebase.firestore.FieldValue.serverTimestamp(),displayName:currentUser.displayName,userPhotoURL:currentUser.photoURL});setInputText('');}};// get the all channel names\nuseEffect(()=>{if(channelId){db.collection('channels').onSnapshot(snapshot=>setChannel(snapshot.docs.map(doc=>({id:doc.id,data:doc.data()}))));}// \n},[db,channel,channelId]);// get all massages from the db\nuseEffect(()=>{if(channelId){db.collection('channels').doc(channelId).collection('massages').orderBy('timeStamp','asc').onSnapshot(snapshot=>{setMassages(snapshot.docs.map(doc=>doc.data()));});}},[channelId,db,setMassages]);console.log(massages);return/*#__PURE__*/_jsxs(\"div\",{style:{flex:'0.7'},children:[/*#__PURE__*/_jsx(MessageHeader,{massages:massages}),/*#__PURE__*/_jsx(Message,{currentUser:currentUser,massages:massages}),/*#__PURE__*/_jsx(MessageSender,{inputText:inputText,handleChange:handleSubmit,setInputText:setInputText})]});}","map":{"version":3,"names":["React","useEffect","useState","MessageHeader","MessageSender","firebase","useParams","useSelector","Message","jsx","_jsx","jsxs","_jsxs","Chat","channelId","currentUser","state","auth","channel","setChannel","massages","setMassages","inputText","setInputText","db","firestore","handleSubmit","e","preventDefault","console","log","collection","doc","add","timeStamp","FieldValue","serverTimestamp","displayName","userPhotoURL","photoURL","onSnapshot","snapshot","docs","map","id","data","orderBy","style","flex","children","handleChange"],"sources":["C:/Users/hp/Downloads/Telegram-clone-main/Telegram-clone-main/src/App/Components/Chat/Chat.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport MessageHeader from './MessageHeader/MessageHeader'\nimport MessageSender from './MessageSender/MessageSender'\nimport firebase from '../../Firebase/Firebase'\nimport {useParams} from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport Message from './Message/Message'\n\nexport default function Chat() {\n    const {channelId} = useParams()\n    const {currentUser } = useSelector(state => state.auth)\n    const [channel, setChannel] = useState([])\n    const [massages,setMassages] = useState([])\n    const [inputText, setInputText]=useState('')\n\n    const db = firebase.firestore()\n\n    // handle Submit to handle the input and take the message and send it to the firebase\n    const handleSubmit= e=>{\n        e.preventDefault();\n        console.log(inputText);\n        if (channelId){\n            db.collection('channels').doc(channelId).collection('massages').add({\n                massages: inputText,\n                timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\n                displayName: currentUser.displayName,\n                userPhotoURL: currentUser.photoURL\n\n            })\n            setInputText('')\n        }\n      \n    }\n    // get the all channel names\n    useEffect(()=>{\n        if (channelId){\n            db.collection('channels').onSnapshot(snapshot => \n                setChannel(\n                       snapshot.docs.map(doc =>({\n                       id: doc.id,\n                       data: doc.data()\n                   })\n               )\n           ))\n        }\n      \n    \n         // \n     },[db,channel,channelId ])\n    \n     // get all massages from the db\n    useEffect(()=>{\n        if (channelId){\n            db.collection('channels').doc(channelId).collection('massages')\n            .orderBy('timeStamp','asc')\n            .onSnapshot(snapshot=>{\n                 setMassages(snapshot.docs.map(doc=> doc.data()))\n             })\n      \n        }\n       \n        \n    },[channelId, db, setMassages])\n \n\n    console.log(massages);\n    return (\n        <div style={{flex: '0.7'}}> \n            <MessageHeader massages={massages} />\n            <Message currentUser={currentUser} massages={massages}/>\n                \n            <MessageSender \n            inputText={inputText} \n            handleChange={handleSubmit} \n            setInputText={setInputText}/> \n        </div>\n    )\n}\n\n\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,aAAa,KAAM,+BAA+B,CACzD,MAAO,CAAAC,aAAa,KAAM,+BAA+B,CACzD,MAAO,CAAAC,QAAQ,KAAM,yBAAyB,CAC9C,OAAQC,SAAS,KAAO,kBAAkB,CAC1C,OAASC,WAAW,KAAQ,aAAa,CACzC,MAAO,CAAAC,OAAO,KAAM,mBAAmB,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEvC,cAAe,SAAS,CAAAC,IAAIA,CAAA,CAAG,CAC3B,KAAM,CAACC,SAAS,CAAC,CAAGR,SAAS,CAAC,CAAC,CAC/B,KAAM,CAACS,WAAY,CAAC,CAAGR,WAAW,CAACS,KAAK,EAAIA,KAAK,CAACC,IAAI,CAAC,CACvD,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACkB,QAAQ,CAACC,WAAW,CAAC,CAAGnB,QAAQ,CAAC,EAAE,CAAC,CAC3C,KAAM,CAACoB,SAAS,CAAEC,YAAY,CAAC,CAACrB,QAAQ,CAAC,EAAE,CAAC,CAE5C,KAAM,CAAAsB,EAAE,CAAGnB,QAAQ,CAACoB,SAAS,CAAC,CAAC,CAE/B;AACA,KAAM,CAAAC,YAAY,CAAEC,CAAC,EAAE,CACnBA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClBC,OAAO,CAACC,GAAG,CAACR,SAAS,CAAC,CACtB,GAAIR,SAAS,CAAC,CACVU,EAAE,CAACO,UAAU,CAAC,UAAU,CAAC,CAACC,GAAG,CAAClB,SAAS,CAAC,CAACiB,UAAU,CAAC,UAAU,CAAC,CAACE,GAAG,CAAC,CAChEb,QAAQ,CAAEE,SAAS,CACnBY,SAAS,CAAE7B,QAAQ,CAACoB,SAAS,CAACU,UAAU,CAACC,eAAe,CAAC,CAAC,CAC1DC,WAAW,CAAEtB,WAAW,CAACsB,WAAW,CACpCC,YAAY,CAAEvB,WAAW,CAACwB,QAE9B,CAAC,CAAC,CACFhB,YAAY,CAAC,EAAE,CAAC,CACpB,CAEJ,CAAC,CACD;AACAtB,SAAS,CAAC,IAAI,CACV,GAAIa,SAAS,CAAC,CACVU,EAAE,CAACO,UAAU,CAAC,UAAU,CAAC,CAACS,UAAU,CAACC,QAAQ,EACzCtB,UAAU,CACHsB,QAAQ,CAACC,IAAI,CAACC,GAAG,CAACX,GAAG,GAAI,CACzBY,EAAE,CAAEZ,GAAG,CAACY,EAAE,CACVC,IAAI,CAAEb,GAAG,CAACa,IAAI,CAAC,CACnB,CAAC,CACL,CACJ,CAAC,CAAC,CACL,CAGC;AACJ,CAAC,CAAC,CAACrB,EAAE,CAACN,OAAO,CAACJ,SAAS,CAAE,CAAC,CAE1B;AACDb,SAAS,CAAC,IAAI,CACV,GAAIa,SAAS,CAAC,CACVU,EAAE,CAACO,UAAU,CAAC,UAAU,CAAC,CAACC,GAAG,CAAClB,SAAS,CAAC,CAACiB,UAAU,CAAC,UAAU,CAAC,CAC9De,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAC1BN,UAAU,CAACC,QAAQ,EAAE,CACjBpB,WAAW,CAACoB,QAAQ,CAACC,IAAI,CAACC,GAAG,CAACX,GAAG,EAAGA,GAAG,CAACa,IAAI,CAAC,CAAC,CAAC,CAAC,CACpD,CAAC,CAAC,CAEP,CAGJ,CAAC,CAAC,CAAC/B,SAAS,CAAEU,EAAE,CAAEH,WAAW,CAAC,CAAC,CAG/BQ,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC,CACrB,mBACIR,KAAA,QAAKmC,KAAK,CAAE,CAACC,IAAI,CAAE,KAAK,CAAE,CAAAC,QAAA,eACtBvC,IAAA,CAACP,aAAa,EAACiB,QAAQ,CAAEA,QAAS,CAAE,CAAC,cACrCV,IAAA,CAACF,OAAO,EAACO,WAAW,CAAEA,WAAY,CAACK,QAAQ,CAAEA,QAAS,CAAC,CAAC,cAExDV,IAAA,CAACN,aAAa,EACdkB,SAAS,CAAEA,SAAU,CACrB4B,YAAY,CAAExB,YAAa,CAC3BH,YAAY,CAAEA,YAAa,CAAC,CAAC,EAC5B,CAAC,CAEd","ignoreList":[]},"metadata":{},"sourceType":"module"}