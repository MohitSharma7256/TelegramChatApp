{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Downloads\\\\Telegram-clone-main\\\\Telegram-clone-main\\\\src\\\\App\\\\Components\\\\Chat\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport MessageHeader from './MessageHeader/MessageHeader';\nimport MessageSender from './MessageSender/MessageSender';\nimport firebase from '../../Firebase/Firebase';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport Message from './Message/Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n  const {\n    channelId\n  } = useParams();\n  const {\n    currentUser\n  } = useSelector(state => state.auth);\n  const [channel, setChannel] = useState([]);\n  const [massages, setMassages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const db = firebase.firestore();\n\n  // handle Submit to handle the input and take the message and send it to the firebase\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(inputText);\n    if (channelId) {\n      db.collection('channels').doc(channelId).collection('massages').add({\n        massages: inputText,\n        timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\n        displayName: currentUser.displayName,\n        userPhotoURL: currentUser.photoURL\n      });\n      setInputText('');\n    }\n  };\n  // get the all channel names\n  useEffect(() => {\n    if (channelId) {\n      db.collection('channels').onSnapshot(snapshot => setChannel(snapshot.docs.map(doc => ({\n        id: doc.id,\n        data: doc.data()\n      }))));\n    }\n\n    // \n  }, [db, channel, channelId]);\n\n  // get all massages from the db\n  useEffect(() => {\n    if (channelId) {\n      db.collection('channels').doc(channelId).collection('massages').orderBy('timeStamp', 'asc').onSnapshot(snapshot => {\n        setMassages(snapshot.docs.map(doc => doc.data()));\n      });\n    }\n  }, [channelId, db, setMassages]);\n  console.log(massages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      flex: '0.7'\n    },\n    children: [/*#__PURE__*/_jsxDEV(MessageHeader, {\n      massages: massages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      currentUser: currentUser,\n      massages: massages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MessageSender, {\n      inputText: inputText,\n      handleChange: handleSubmit,\n      setInputText: setInputText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"7IQwA9SiA37Kn5FpTxyw5kzljsE=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","MessageHeader","MessageSender","firebase","useParams","useSelector","Message","jsxDEV","_jsxDEV","Chat","_s","channelId","currentUser","state","auth","channel","setChannel","massages","setMassages","inputText","setInputText","db","firestore","handleSubmit","e","preventDefault","console","log","collection","doc","add","timeStamp","FieldValue","serverTimestamp","displayName","userPhotoURL","photoURL","onSnapshot","snapshot","docs","map","id","data","orderBy","style","flex","children","fileName","_jsxFileName","lineNumber","columnNumber","handleChange","_c","$RefreshReg$"],"sources":["C:/Users/hp/Downloads/Telegram-clone-main/Telegram-clone-main/src/App/Components/Chat/Chat.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport MessageHeader from './MessageHeader/MessageHeader'\nimport MessageSender from './MessageSender/MessageSender'\nimport firebase from '../../Firebase/Firebase'\nimport {useParams} from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport Message from './Message/Message'\n\nexport default function Chat() {\n    const {channelId} = useParams()\n    const {currentUser } = useSelector(state => state.auth)\n    const [channel, setChannel] = useState([])\n    const [massages,setMassages] = useState([])\n    const [inputText, setInputText]=useState('')\n\n    const db = firebase.firestore()\n\n    // handle Submit to handle the input and take the message and send it to the firebase\n    const handleSubmit= e=>{\n        e.preventDefault();\n        console.log(inputText);\n        if (channelId){\n            db.collection('channels').doc(channelId).collection('massages').add({\n                massages: inputText,\n                timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\n                displayName: currentUser.displayName,\n                userPhotoURL: currentUser.photoURL\n\n            })\n            setInputText('')\n        }\n      \n    }\n    // get the all channel names\n    useEffect(()=>{\n        if (channelId){\n            db.collection('channels').onSnapshot(snapshot => \n                setChannel(\n                       snapshot.docs.map(doc =>({\n                       id: doc.id,\n                       data: doc.data()\n                   })\n               )\n           ))\n        }\n      \n    \n         // \n     },[db,channel,channelId ])\n    \n     // get all massages from the db\n    useEffect(()=>{\n        if (channelId){\n            db.collection('channels').doc(channelId).collection('massages')\n            .orderBy('timeStamp','asc')\n            .onSnapshot(snapshot=>{\n                 setMassages(snapshot.docs.map(doc=> doc.data()))\n             })\n      \n        }\n       \n        \n    },[channelId, db, setMassages])\n \n\n    console.log(massages);\n    return (\n        <div style={{flex: '0.7'}}> \n            <MessageHeader massages={massages} />\n            <Message currentUser={currentUser} massages={massages}/>\n                \n            <MessageSender \n            inputText={inputText} \n            handleChange={handleSubmit} \n            setInputText={setInputText}/> \n        </div>\n    )\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}